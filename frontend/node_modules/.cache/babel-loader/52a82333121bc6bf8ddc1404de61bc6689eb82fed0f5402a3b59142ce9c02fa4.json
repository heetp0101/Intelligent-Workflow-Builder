{"ast":null,"code":"var _jsxFileName = \"E:\\\\AI Projects\\\\Intelligent Workflow Builder\\\\frontend\\\\src\\\\components\\\\Canvas.jsx\",\n  _s = $RefreshSig$();\n// src/components/Canvas.jsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, MiniMap, Controls, ReactFlowProvider, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport ConfigPanel from './ConfigPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nlet id = 0;\nconst getId = () => `node_${id++}`;\nconst Canvas = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [workflowStructure, setWorkflowStructure] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  //  OnDrop Checkpoint #1 ///////////////////////////////////////////////////////////////////////\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           const current = nodes.find((n) => n.id === nodeId);\n  //           setSelectedNode(current);\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n  //  OnDrop Checkpoint 2  /////////////////////////////////////////////////////////////////////\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           setSelectedNode((prev) => {\n  //             console.log(\"Currently selected node : \",selectedNode);\n  //             const current = nodes.find((n) => n.id === nodeId);\n  //             console.log(\"current node is : \",current)\n  //             return current;\n  //           });\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n  // onDrop Checkpoint 3 \n\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = {\n      x: event.clientX - 250,\n      y: event.clientY\n    };\n    const nodeId = getId();\n    const newNode = {\n      id: nodeId,\n      type: 'custom',\n      position,\n      data: {\n        label: type,\n        config: {},\n        onConfigure: () => {\n          setSelectedNode(newNode); // ğŸ’¡ directly use newNode (no need to find again)\n        }\n      }\n    };\n    console.log(\"current selected node is :\", selectedNode);\n    setNodes(nds => [...nds, newNode]);\n  }, [setNodes]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const updateNodeData = updatedNode => {\n    setNodes(nds => nds.map(node => node.id === updatedNode.id ? updatedNode : node));\n    setSelectedNode(updatedNode);\n  };\n  const computeWorkflowStructure = () => {\n    console.log(\"selected node is : \", node);\n    const structure = nodes.map(node => ({\n      id: node.id,\n      type: node.data.label,\n      config: node.data.config || {},\n      connections: edges.filter(e => e.source === node.id).map(e => e.target)\n    }));\n    setWorkflowStructure(structure);\n    console.log('Workflow structure:', structure);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        height: '100vh'\n      },\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: computeWorkflowStructure,\n          style: {\n            position: 'absolute',\n            top: 20,\n            left: 20,\n            zIndex: 10,\n            padding: '6px 12px',\n            background: '#007bff',\n            color: '#fff',\n            border: 'none',\n            borderRadius: '5px'\n          },\n          children: \"Save Workflow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(ConfigPanel, {\n      nodeData: selectedNode,\n      updateNodeData: updateNodeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"tG7y5M9off/vt1jwuWGu4wPwdwA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Canvas;\nexport default () => /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n  children: /*#__PURE__*/_jsxDEV(Canvas, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 199,\n  columnNumber: 3\n}, this);\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","MiniMap","Controls","ReactFlowProvider","useNodesState","useEdgesState","CustomNode","ConfigPanel","jsxDEV","_jsxDEV","nodeTypes","custom","id","getId","Canvas","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","workflowStructure","setWorkflowStructure","onConnect","params","eds","onDrop","event","preventDefault","type","dataTransfer","getData","position","x","clientX","y","clientY","nodeId","newNode","data","label","config","onConfigure","console","log","nds","onDragOver","dropEffect","updateNodeData","updatedNode","map","node","computeWorkflowStructure","structure","connections","filter","e","source","target","style","display","width","children","flex","height","fitView","onClick","top","left","zIndex","padding","background","color","border","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","nodeData","_c","$RefreshReg$"],"sources":["E:/AI Projects/Intelligent Workflow Builder/frontend/src/components/Canvas.jsx"],"sourcesContent":["// src/components/Canvas.jsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  MiniMap,\n  Controls,\n  ReactFlowProvider,\n  useNodesState,\n  useEdgesState\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport ConfigPanel from './ConfigPanel';\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nlet id = 0;\nconst getId = () => `node_${id++}`;\n\nconst Canvas = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [workflowStructure, setWorkflowStructure] = useState([]);\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    []\n  );\n\n//  OnDrop Checkpoint #1 ///////////////////////////////////////////////////////////////////////\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           const current = nodes.find((n) => n.id === nodeId);\n  //           setSelectedNode(current);\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n\n\n\n    //  OnDrop Checkpoint 2  /////////////////////////////////////////////////////////////////////\n\n    // const onDrop = useCallback(\n    //   (event) => {\n    //     event.preventDefault();\n    //     const type = event.dataTransfer.getData('application/reactflow');\n    //     const position = { x: event.clientX - 250, y: event.clientY };\n    //     const nodeId = getId();\n    \n    //     const newNode = {\n    //       id: nodeId,\n    //       type: 'custom',\n    //       position,\n    //       data: {\n    //         label: type,\n    //         config: {},\n    //         onConfigure: () => {\n    //           setSelectedNode((prev) => {\n    //             console.log(\"Currently selected node : \",selectedNode);\n    //             const current = nodes.find((n) => n.id === nodeId);\n    //             console.log(\"current node is : \",current)\n    //             return current;\n    //           });\n    //         }\n    //       }\n    //     };\n    \n    //     setNodes((nds) => nds.concat(newNode));\n    //   },\n    //   [setNodes, nodes]\n    // );\n    \n\n\n    // onDrop Checkpoint 3 \n\n    const onDrop = useCallback(\n      (event) => {\n        event.preventDefault();\n        const type = event.dataTransfer.getData('application/reactflow');\n        const position = { x: event.clientX - 250, y: event.clientY };\n        const nodeId = getId();\n    \n        const newNode = {\n          id: nodeId,\n          type: 'custom',\n          position,\n          data: {\n            label: type,\n            config: {},\n            onConfigure: () => {\n              setSelectedNode(newNode); // ğŸ’¡ directly use newNode (no need to find again)\n            }\n          }\n        };\n        \n        console.log(\"current selected node is :\",selectedNode)\n        setNodes((nds) => [...nds, newNode]);\n      },\n      [setNodes]\n    );\n\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const updateNodeData = (updatedNode) => {\n    setNodes((nds) =>\n      nds.map((node) => (node.id === updatedNode.id ? updatedNode : node))\n    );\n    setSelectedNode(updatedNode);\n  };\n\n  const computeWorkflowStructure = () => {\n\n\n    console.log(\"selected node is : \",node)\n    const structure = nodes.map((node) => ({\n      id: node.id,\n      type: node.data.label,\n      config: node.data.config || {},\n      connections: edges\n        .filter((e) => e.source === node.id)\n        .map((e) => e.target)\n    }));\n    setWorkflowStructure(structure);\n    console.log('Workflow structure:', structure);\n  };\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, height: '100vh' }} onDrop={onDrop} onDragOver={onDragOver}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView\n        >\n          <button\n              onClick={computeWorkflowStructure}\n              style={{\n                position: 'absolute',\n                top: 20,\n                left: 20,\n                zIndex: 10,\n                padding: '6px 12px',\n                background: '#007bff',\n                color: '#fff',\n                border: 'none',\n                borderRadius: '5px'\n              }}\n            >\n              Save Workflow\n          </button>\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n        \n        \n      </div>\n      \n      {selectedNode && (\n           <ConfigPanel nodeData={selectedNode} updateNodeData={updateNodeData} />\n      )}\n    </div>\n  );\n};\n\nexport default () => (\n  <ReactFlowProvider>\n    <Canvas />\n  </ReactFlowProvider>\n);\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACpD,OAAOC,SAAS,IACdC,OAAO,EACPC,UAAU,EACVC,OAAO,EACPC,QAAQ,EACRC,iBAAiB,EACjBC,aAAa,EACbC,aAAa,QACR,qBAAqB;AAC5B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAEL;AACV,CAAC;AAED,IAAIM,EAAE,GAAG,CAAC;AACV,MAAMC,KAAK,GAAGA,CAAA,KAAM,QAAQD,EAAE,EAAE,EAAE;AAElC,MAAME,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGd,aAAa,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACe,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGhB,aAAa,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC2B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM6B,SAAS,GAAG9B,WAAW,CAC1B+B,MAAM,IAAKP,QAAQ,CAAEQ,GAAG,IAAK7B,OAAO,CAAC4B,MAAM,EAAEC,GAAG,CAAC,CAAC,EACnD,EACF,CAAC;;EAEH;;EAEE;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAKE;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAIA;;EAEA,MAAMC,MAAM,GAAGjC,WAAW,CACvBkC,KAAK,IAAK;IACTA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,IAAI,GAAGF,KAAK,CAACG,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;IAChE,MAAMC,QAAQ,GAAG;MAAEC,CAAC,EAAEN,KAAK,CAACO,OAAO,GAAG,GAAG;MAAEC,CAAC,EAAER,KAAK,CAACS;IAAQ,CAAC;IAC7D,MAAMC,MAAM,GAAG3B,KAAK,CAAC,CAAC;IAEtB,MAAM4B,OAAO,GAAG;MACd7B,EAAE,EAAE4B,MAAM;MACVR,IAAI,EAAE,QAAQ;MACdG,QAAQ;MACRO,IAAI,EAAE;QACJC,KAAK,EAAEX,IAAI;QACXY,MAAM,EAAE,CAAC,CAAC;QACVC,WAAW,EAAEA,CAAA,KAAM;UACjBtB,eAAe,CAACkB,OAAO,CAAC,CAAC,CAAC;QAC5B;MACF;IACF,CAAC;IAEDK,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAACzB,YAAY,CAAC;IACtDL,QAAQ,CAAE+B,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAEP,OAAO,CAAC,CAAC;EACtC,CAAC,EACD,CAACxB,QAAQ,CACX,CAAC;EAGH,MAAMgC,UAAU,GAAGrD,WAAW,CAAEkC,KAAK,IAAK;IACxCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBD,KAAK,CAACG,YAAY,CAACiB,UAAU,GAAG,MAAM;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAIC,WAAW,IAAK;IACtCnC,QAAQ,CAAE+B,GAAG,IACXA,GAAG,CAACK,GAAG,CAAEC,IAAI,IAAMA,IAAI,CAAC1C,EAAE,KAAKwC,WAAW,CAACxC,EAAE,GAAGwC,WAAW,GAAGE,IAAK,CACrE,CAAC;IACD/B,eAAe,CAAC6B,WAAW,CAAC;EAC9B,CAAC;EAED,MAAMG,wBAAwB,GAAGA,CAAA,KAAM;IAGrCT,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAACO,IAAI,CAAC;IACvC,MAAME,SAAS,GAAGxC,KAAK,CAACqC,GAAG,CAAEC,IAAI,KAAM;MACrC1C,EAAE,EAAE0C,IAAI,CAAC1C,EAAE;MACXoB,IAAI,EAAEsB,IAAI,CAACZ,IAAI,CAACC,KAAK;MACrBC,MAAM,EAAEU,IAAI,CAACZ,IAAI,CAACE,MAAM,IAAI,CAAC,CAAC;MAC9Ba,WAAW,EAAEtC,KAAK,CACfuC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAKN,IAAI,CAAC1C,EAAE,CAAC,CACnCyC,GAAG,CAAEM,CAAC,IAAKA,CAAC,CAACE,MAAM;IACxB,CAAC,CAAC,CAAC;IACHpC,oBAAoB,CAAC+B,SAAS,CAAC;IAC/BV,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAES,SAAS,CAAC;EAC/C,CAAC;EAED,oBACE/C,OAAA;IAAKqD,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC7CxD,OAAA;MAAKqD,KAAK,EAAE;QAAEI,IAAI,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAACtC,MAAM,EAAEA,MAAO;MAACoB,UAAU,EAAEA,UAAW;MAAAgB,QAAA,eAC/ExD,OAAA,CAACX,SAAS;QACRkB,KAAK,EAAEA,KAAM;QACbG,KAAK,EAAEA,KAAM;QACbD,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAEA,aAAc;QAC7BK,SAAS,EAAEA,SAAU;QACrBhB,SAAS,EAAEA,SAAU;QACrB0D,OAAO;QAAAH,QAAA,gBAEPxD,OAAA;UACI4D,OAAO,EAAEd,wBAAyB;UAClCO,KAAK,EAAE;YACL3B,QAAQ,EAAE,UAAU;YACpBmC,GAAG,EAAE,EAAE;YACPC,IAAI,EAAE,EAAE;YACRC,MAAM,EAAE,EAAE;YACVC,OAAO,EAAE,UAAU;YACnBC,UAAU,EAAE,SAAS;YACrBC,KAAK,EAAE,MAAM;YACbC,MAAM,EAAE,MAAM;YACdC,YAAY,EAAE;UAChB,CAAE;UAAAZ,QAAA,EACH;QAEH;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxE,OAAA,CAACR,OAAO;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXxE,OAAA,CAACP,QAAQ;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZxE,OAAA,CAACT,UAAU;UAAA8E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGT,CAAC,EAEL3D,YAAY,iBACRb,OAAA,CAACF,WAAW;MAAC2E,QAAQ,EAAE5D,YAAa;MAAC6B,cAAc,EAAEA;IAAe;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC1E;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClE,EAAA,CA9KID,MAAM;EAAA,QAC+BV,aAAa,EACbC,aAAa;AAAA;AAAA8E,EAAA,GAFlDrE,MAAM;AAgLZ,eAAe,mBACbL,OAAA,CAACN,iBAAiB;EAAA8D,QAAA,eAChBxD,OAAA,CAACK,MAAM;IAAAgE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACO,CACpB;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}