{"ast":null,"code":"var _jsxFileName = \"E:\\\\AI Projects\\\\Intelligent Workflow Builder\\\\frontend\\\\src\\\\components\\\\Canvas.jsx\",\n  _s = $RefreshSig$();\n// src/components/Canvas.jsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, MiniMap, Controls, ReactFlowProvider, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport ConfigPanel from './ConfigPanel';\nimport { saveWorkflow } from '../api/workflow';\nimport './Canvas.css';\nimport RunResultPanel from './RunResultPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nlet id = 0;\nconst getId = () => `node_${id++}`;\nconst Canvas = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [workflowStructure, setWorkflowStructure] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isRunning, setIsRunning] = useState(false);\n  const [runResult, setRunResult] = useState(null);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  //  OnDrop Checkpoint #1 ///////////////////////////////////////////////////////////////////////\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           const current = nodes.find((n) => n.id === nodeId);\n  //           setSelectedNode(current);\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n  //  OnDrop Checkpoint 2  /////////////////////////////////////////////////////////////////////\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           setSelectedNode((prev) => {\n  //             console.log(\"Currently selected node : \",selectedNode);\n  //             const current = nodes.find((n) => n.id === nodeId);\n  //             console.log(\"current node is : \",current)\n  //             return current;\n  //           });\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n  // onDrop Checkpoint 3 \n\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = {\n      x: event.clientX - 250,\n      y: event.clientY\n    };\n    const nodeId = getId();\n    const newNode = {\n      id: nodeId,\n      type: 'custom',\n      position,\n      data: {\n        label: type,\n        config: {},\n        onConfigure: () => {\n          setSelectedNode(newNode); // ðŸ’¡ directly use newNode (no need to find again)\n        }\n      }\n    };\n    console.log(\"current selected node is :\", selectedNode);\n    setNodes(nds => [...nds, newNode]);\n  }, [setNodes]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  // const updateNodeData = (updatedNode) => {\n  //   setNodes((nds) =>\n  //     nds.map((node) => (node.id === updatedNode.id ? updatedNode : node))\n  //   );\n  //   setSelectedNode(updatedNode);\n  // };\n\n  const updateNodeData = updatedPartialNode => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === updatedPartialNode.id) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            config: {\n              ...node.data.config,\n              ...updatedPartialNode.data.config\n            }\n          }\n        };\n      }\n      return node;\n    }));\n\n    // Also update selectedNode with merged data\n    setSelectedNode(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        config: {\n          ...prev.data.config,\n          ...updatedPartialNode.data.config\n        }\n      }\n    }));\n  };\n\n  // computeWorkflowStructure  checkpoint 1\n\n  // const computeWorkflowStructure = () => {\n\n  //   const structure = nodes.map((node) => ({\n  //     id: node.id,\n  //     type: node.data.label,\n  //     config: node.data.config || {},\n  //     connections: edges\n  //       .filter((e) => e.source === node.id)\n  //       .map((e) => e.target)\n  //   }));\n  //   setWorkflowStructure(structure);\n  //   console.log('Workflow structure:', structure);\n  // };\n\n  // computerWorkflowStructure checkpoint 2\n\n  // logic for save workflow when save workflow button is clicked it store the structure data of nodes and edges\n  //  like which node is connected to which one. and then send the data to backend through FAST API\n  const computeWorkflowStructure = async () => {\n    // here the \"nodes\" is the raw data we require proper schema structure like JSON to send data thorugh FAST API else \n    /// else it will give error code 433 Unprocessed data kind of that\n    const structure = nodes.map(node => ({\n      id: node.id,\n      type: node.data.label,\n      config: node.data.config || {},\n      connections: edges.filter(e => e.source === node.id).map(e => e.target)\n    }));\n    setWorkflowStructure(structure);\n    console.log('Workflow structure:', structure);\n    setIsSaving(true); // start loading\n\n    try {\n      // const result = await saveWorkflow(structure);\n\n      // fetch(\"http://localhost:8000/api/save_workflow\", {\n      //       method: \"POST\",\n      //       headers: {\n      //         \"Content-Type\": \"application/json\"\n      //       },\n      //       body: JSON.stringify({structure})\n      //     })\n\n      fetch(\"http://localhost:8000/api/save-workflow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(structure)\n      }).then(res => res.json()).then(result => console.log(result)).catch(error => console.error(\"Error sending workflow:\", error));\n      alert('Workflow saved successfully!');\n      // console.log('Backend Response:', result);\n    } catch (error) {\n      alert('Failed to save workflow!');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  //  logic for run workflow\n  // here also like previously \"nodes\" and \"edges\" are raw data we need to parse into JSON structure\n  // that is understand by FAST API else it will give error code of 422 Unprocessable content\n  const runWorkflow = async () => {\n    try {\n      const formattedNodes = nodes.map(node => ({\n        id: node.id,\n        type: node.data.label,\n        config: node.data.config || {},\n        connections: edges.filter(e => e.source === node.id).map(e => e.target)\n      }));\n      const formattedEdges = edges.map(edge => ({\n        id: edge.id,\n        source: edge.source,\n        target: edge.target\n      }));\n      const payload = {\n        nodes: formattedNodes,\n        edges: formattedEdges\n      };\n      setIsRunning(true);\n\n      // before sending data to backend we should valiate if input is empty or if there is no connection (edges) between nodes\n\n      // validating for empty placeholder test case\n      const hasEmptyUserQuery = nodes.some(node => node.type === \"userQuery\" && (!node.data.placeholder || node.data.placeholder.trim() === \"\"));\n      if (hasEmptyUserQuery) {\n        alert(\"Please fill in all User Query inputs before running workflow!\");\n        return; // stop execution\n      }\n\n      //validating for missing connection between nodes\n      const hasUnconnectedNodes = nodes.some(node => {\n        const connected = edges.some(edge => edge.source === node.id || edge.target === node.id);\n        return !connected && node.type !== \"userQuery\" && node.type !== \"output\";\n      });\n      if (hasUnconnectedNodes) {\n        alert(\"Some nodes are not connected. Please connect all nodes properly!\");\n        return;\n      }\n      const response = await fetch(\"http://localhost:8000/api/run-workflow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        throw new Error(`Server responded with status ${response.status}`);\n      }\n      const result = await response.json();\n      console.log(\"Workflow Run Result:\", result);\n      if (result.status === \"error\") {\n        setRunResult({\n          error: result.message || \"Unknown error occurred\"\n        });\n      } else {\n        setRunResult(result);\n      }\n\n      // // ðŸ‘‰ show on screen\n      // setRunResult(result);\n\n      // optional: toast\n      // alert(`Workflow is running: ${result.status}`);\n    } catch (error) {\n      console.error(\"Error running workflow:\", error);\n      alert(\"Error running workflow. Check console.\");\n      setRunResult({\n        error: error.message\n      });\n    } finally {\n      setIsRunning(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        height: '100vh'\n      },\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            zIndex: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: computeWorkflowStructure,\n            className: \"action-button save-button\",\n            disabled: isSaving,\n            style: {\n              position: 'absolute',\n              top: 20,\n              left: 20,\n              zIndex: 10,\n              padding: '6px 12px',\n              background: '#007bff',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '5px'\n            },\n            children: isSaving ? 'Saving...' : 'Save Workflow'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: runWorkflow,\n            className: \"action-button run-button\",\n            disabled: isRunning,\n            style: {\n              position: 'absolute',\n              top: 60,\n              // 20 (Save) + 40 (button height + spacing)\n              left: 20,\n              zIndex: 10,\n              padding: '6px 12px',\n              background: '#28a745',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '5px'\n            },\n            children: isRunning ? 'Running...' : 'Run Workflow'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), runResult !== null && runResult !== void 0 && runResult.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500 font-semibold\",\n          children: [\"Error: \", runResult.error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 9\n        }, this) :\n        /*#__PURE__*/\n        // existing result rendering\n        _jsxDEV(RunResultPanel, {\n          result: runResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(ConfigPanel, {\n      nodeData: selectedNode,\n      updateNodeData: updateNodeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"Q8EZFrBDfIOwxIMKrY4d15pvMF4=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Canvas;\nexport default () => /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n  children: /*#__PURE__*/_jsxDEV(Canvas, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 438,\n  columnNumber: 3\n}, this);\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","MiniMap","Controls","ReactFlowProvider","useNodesState","useEdgesState","CustomNode","ConfigPanel","saveWorkflow","RunResultPanel","jsxDEV","_jsxDEV","nodeTypes","custom","id","getId","Canvas","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","workflowStructure","setWorkflowStructure","isSaving","setIsSaving","isRunning","setIsRunning","runResult","setRunResult","onConnect","params","eds","onDrop","event","preventDefault","type","dataTransfer","getData","position","x","clientX","y","clientY","nodeId","newNode","data","label","config","onConfigure","console","log","nds","onDragOver","dropEffect","updateNodeData","updatedPartialNode","map","node","prev","computeWorkflowStructure","structure","connections","filter","e","source","target","fetch","method","headers","body","JSON","stringify","then","res","json","result","catch","error","alert","runWorkflow","formattedNodes","formattedEdges","edge","payload","hasEmptyUserQuery","some","placeholder","trim","hasUnconnectedNodes","connected","response","ok","Error","status","message","style","display","width","children","flex","height","fitView","top","left","zIndex","onClick","className","disabled","padding","background","color","border","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","nodeData","_c","$RefreshReg$"],"sources":["E:/AI Projects/Intelligent Workflow Builder/frontend/src/components/Canvas.jsx"],"sourcesContent":["// src/components/Canvas.jsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  MiniMap,\n  Controls,\n  ReactFlowProvider,\n  useNodesState,\n  useEdgesState\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport ConfigPanel from './ConfigPanel';\nimport { saveWorkflow } from '../api/workflow';\nimport './Canvas.css';\nimport RunResultPanel from './RunResultPanel';\n\n\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nlet id = 0;\nconst getId = () => `node_${id++}`;\n\nconst Canvas = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [workflowStructure, setWorkflowStructure] = useState([]);\n\n  const [isSaving, setIsSaving] = useState(false);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const [runResult, setRunResult] = useState(null);\n  \n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    []\n  );\n\n//  OnDrop Checkpoint #1 ///////////////////////////////////////////////////////////////////////\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           const current = nodes.find((n) => n.id === nodeId);\n  //           setSelectedNode(current);\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n\n\n\n    //  OnDrop Checkpoint 2  /////////////////////////////////////////////////////////////////////\n\n    // const onDrop = useCallback(\n    //   (event) => {\n    //     event.preventDefault();\n    //     const type = event.dataTransfer.getData('application/reactflow');\n    //     const position = { x: event.clientX - 250, y: event.clientY };\n    //     const nodeId = getId();\n    \n    //     const newNode = {\n    //       id: nodeId,\n    //       type: 'custom',\n    //       position,\n    //       data: {\n    //         label: type,\n    //         config: {},\n    //         onConfigure: () => {\n    //           setSelectedNode((prev) => {\n    //             console.log(\"Currently selected node : \",selectedNode);\n    //             const current = nodes.find((n) => n.id === nodeId);\n    //             console.log(\"current node is : \",current)\n    //             return current;\n    //           });\n    //         }\n    //       }\n    //     };\n    \n    //     setNodes((nds) => nds.concat(newNode));\n    //   },\n    //   [setNodes, nodes]\n    // );\n    \n\n\n    // onDrop Checkpoint 3 \n\n    const onDrop = useCallback(\n      (event) => {\n        event.preventDefault();\n        const type = event.dataTransfer.getData('application/reactflow');\n        const position = { x: event.clientX - 250, y: event.clientY };\n        const nodeId = getId();\n    \n        const newNode = {\n          id: nodeId,\n          type: 'custom',\n          position,\n          data: {\n            label: type,\n            config: {},\n            onConfigure: () => {\n              setSelectedNode(newNode); // ðŸ’¡ directly use newNode (no need to find again)\n            }\n          }\n        };\n        \n        console.log(\"current selected node is :\",selectedNode)\n        setNodes((nds) => [...nds, newNode]);\n      },\n      [setNodes]\n    );\n\n\n    const onDragOver = useCallback((event) => {\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'move';\n    }, []);\n\n    // const updateNodeData = (updatedNode) => {\n    //   setNodes((nds) =>\n    //     nds.map((node) => (node.id === updatedNode.id ? updatedNode : node))\n    //   );\n    //   setSelectedNode(updatedNode);\n    // };\n\n\n    const updateNodeData = (updatedPartialNode) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === updatedPartialNode.id) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                config: {\n                  ...node.data.config,\n                  ...updatedPartialNode.data.config,\n                },\n              },\n            };\n          }\n          return node;\n        })\n      );\n    \n      // Also update selectedNode with merged data\n      setSelectedNode((prev) => ({\n        ...prev,\n        data: {\n          ...prev.data,\n          config: {\n            ...prev.data.config,\n            ...updatedPartialNode.data.config,\n          },\n        },\n      }));\n    };\n    \n\n\n\n\n\n\n  // computeWorkflowStructure  checkpoint 1\n  \n  // const computeWorkflowStructure = () => {\n\n  //   const structure = nodes.map((node) => ({\n  //     id: node.id,\n  //     type: node.data.label,\n  //     config: node.data.config || {},\n  //     connections: edges\n  //       .filter((e) => e.source === node.id)\n  //       .map((e) => e.target)\n  //   }));\n  //   setWorkflowStructure(structure);\n  //   console.log('Workflow structure:', structure);\n  // };\n\n\n  // computerWorkflowStructure checkpoint 2\n\n  // logic for save workflow when save workflow button is clicked it store the structure data of nodes and edges\n  //  like which node is connected to which one. and then send the data to backend through FAST API\n  const computeWorkflowStructure = async () => {\n\n    // here the \"nodes\" is the raw data we require proper schema structure like JSON to send data thorugh FAST API else \n    /// else it will give error code 433 Unprocessed data kind of that\n    const structure = nodes.map((node) => ({\n      id: node.id,\n      type: node.data.label,\n      config: node.data.config || {},\n      connections: edges\n        .filter((e) => e.source === node.id)\n        .map((e) => e.target)\n    }));\n  \n    setWorkflowStructure(structure);\n    console.log('Workflow structure:', structure);\n  \n\n    setIsSaving(true); // start loading\n\n    try {\n      // const result = await saveWorkflow(structure);\n\n      // fetch(\"http://localhost:8000/api/save_workflow\", {\n      //       method: \"POST\",\n      //       headers: {\n      //         \"Content-Type\": \"application/json\"\n      //       },\n      //       body: JSON.stringify({structure})\n      //     })\n\n\n      fetch(\"http://localhost:8000/api/save-workflow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(structure),\n      })\n        .then(res => res.json())\n        .then(result => console.log(result))\n        .catch(error => console.error(\"Error sending workflow:\", error));\n\n\n      alert('Workflow saved successfully!');\n      // console.log('Backend Response:', result);\n    } catch (error) {\n      alert('Failed to save workflow!');\n      \n    }finally {\n      setIsSaving(false);\n    }\n  };\n\n\n  //  logic for run workflow\n      // here also like previously \"nodes\" and \"edges\" are raw data we need to parse into JSON structure\n      // that is understand by FAST API else it will give error code of 422 Unprocessable content\n  const runWorkflow = async () => {\n    try {\n      const formattedNodes = nodes.map((node) => ({\n        id: node.id,\n        type: node.data.label,\n        config: node.data.config || {},\n        connections: edges\n          .filter((e) => e.source === node.id)\n          .map((e) => e.target),\n      }));\n  \n      const formattedEdges = edges.map((edge) => ({\n        id: edge.id,\n        source: edge.source,\n        target: edge.target,\n      }));\n  \n      const payload = {\n        nodes: formattedNodes,\n        edges: formattedEdges,\n      };\n  \n      setIsRunning(true);\n\n\n      // before sending data to backend we should valiate if input is empty or if there is no connection (edges) between nodes\n\n      // validating for empty placeholder test case\n      const hasEmptyUserQuery = nodes.some(\n        (node) => node.type === \"userQuery\" && (!node.data.placeholder || node.data.placeholder.trim() === \"\")\n      );\n\n      if (hasEmptyUserQuery) {\n        alert(\"Please fill in all User Query inputs before running workflow!\");\n        return; // stop execution\n      }\n  \n\n      //validating for missing connection between nodes\n      const hasUnconnectedNodes = nodes.some((node) => {\n        const connected = edges.some(\n          (edge) => edge.source === node.id || edge.target === node.id\n        );\n        return !connected && node.type !== \"userQuery\" && node.type !== \"output\";\n      });\n      \n      if (hasUnconnectedNodes) {\n        alert(\"Some nodes are not connected. Please connect all nodes properly!\");\n        return;\n      }\n\n\n      const response = await fetch(\"http://localhost:8000/api/run-workflow\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`Server responded with status ${response.status}`);\n      }\n  \n      const result = await response.json();\n      console.log(\"Workflow Run Result:\", result);\n  \n\n      if (result.status === \"error\") {\n        setRunResult({ error: result.message || \"Unknown error occurred\" });\n      } else {\n        setRunResult(result);\n      }\n\n      // // ðŸ‘‰ show on screen\n      // setRunResult(result);\n  \n      // optional: toast\n      // alert(`Workflow is running: ${result.status}`);\n    } catch (error) {\n      console.error(\"Error running workflow:\", error);\n      alert(\"Error running workflow. Check console.\");\n      setRunResult({ error: error.message });\n    } finally {\n      setIsRunning(false);\n    }\n  };\n      \n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, height: '100vh' }} onDrop={onDrop} onDragOver={onDragOver}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView\n        >\n\n\n        <div style={{position: 'absolute', top: 10, left: 10, zIndex: 10 }}>  \n          <button\n              onClick={computeWorkflowStructure}\n              className=\"action-button save-button\"\n              disabled={isSaving}\n              style={{\n                position: 'absolute',\n                top: 20,\n                left: 20,\n                zIndex: 10,\n                padding: '6px 12px',\n                background: '#007bff',\n                color: '#fff',\n                border: 'none',\n                borderRadius: '5px'\n              }}\n            >\n              {isSaving ? 'Saving...' : 'Save Workflow'}\n          </button>\n\n          <button\n            onClick={runWorkflow}\n            className=\"action-button run-button\"\n            disabled={isRunning}\n            style={{\n              position: 'absolute',\n              top: 60, // 20 (Save) + 40 (button height + spacing)\n              left: 20,\n              zIndex: 10,\n              padding: '6px 12px',\n              background: '#28a745',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '5px'\n            }}\n          >\n             {isRunning ? 'Running...' : 'Run Workflow'}\n          </button>\n        </div>\n          <MiniMap />\n\n          <Controls />\n\n          <Background />\n\n\n\n      {runResult?.error ? (\n        <div className=\"text-red-500 font-semibold\">\n          Error: {runResult.error}\n        </div>\n      ) : (\n  \n        // existing result rendering\n        <RunResultPanel result={runResult} />\n  \n        )}\n        </ReactFlow>\n        \n\n\n      </div>\n\n      {selectedNode && (\n           <ConfigPanel nodeData={selectedNode} updateNodeData={updateNodeData} />\n      )}\n    </div>\n  );\n};\n\nexport default () => (\n  <ReactFlowProvider>\n    <Canvas />\n  </ReactFlowProvider>\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}