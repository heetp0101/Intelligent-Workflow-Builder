{"ast":null,"code":"// src/components/Canvas.jsx\nimport React,{useCallback,useState}from'react';import ReactFlow,{addEdge,Background,MiniMap,Controls,ReactFlowProvider,useNodesState,useEdgesState}from'react-flow-renderer';import CustomNode from'./CustomNode';import ConfigPanel from'./ConfigPanel';import{saveWorkflow}from'../api/workflow';import'./Canvas.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const nodeTypes={custom:CustomNode};let id=0;const getId=()=>`node_${id++}`;const Canvas=()=>{const[nodes,setNodes,onNodesChange]=useNodesState([]);const[edges,setEdges,onEdgesChange]=useEdgesState([]);const[selectedNode,setSelectedNode]=useState(null);const[workflowStructure,setWorkflowStructure]=useState([]);const[isSaving,setIsSaving]=useState(false);const[isRunning,setIsRunning]=useState(false);const onConnect=useCallback(params=>setEdges(eds=>addEdge(params,eds)),[]);//  OnDrop Checkpoint #1 ///////////////////////////////////////////////////////////////////////\n// const onDrop = useCallback(\n//   (event) => {\n//     event.preventDefault();\n//     const type = event.dataTransfer.getData('application/reactflow');\n//     const position = { x: event.clientX - 250, y: event.clientY };\n//     const nodeId = getId();\n//     const newNode = {\n//       id: nodeId,\n//       type: 'custom',\n//       position,\n//       data: {\n//         label: type,\n//         config: {},\n//         onConfigure: () => {\n//           const current = nodes.find((n) => n.id === nodeId);\n//           setSelectedNode(current);\n//         }\n//       }\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//   },\n//   [setNodes, nodes]\n// );\n//  OnDrop Checkpoint 2  /////////////////////////////////////////////////////////////////////\n// const onDrop = useCallback(\n//   (event) => {\n//     event.preventDefault();\n//     const type = event.dataTransfer.getData('application/reactflow');\n//     const position = { x: event.clientX - 250, y: event.clientY };\n//     const nodeId = getId();\n//     const newNode = {\n//       id: nodeId,\n//       type: 'custom',\n//       position,\n//       data: {\n//         label: type,\n//         config: {},\n//         onConfigure: () => {\n//           setSelectedNode((prev) => {\n//             console.log(\"Currently selected node : \",selectedNode);\n//             const current = nodes.find((n) => n.id === nodeId);\n//             console.log(\"current node is : \",current)\n//             return current;\n//           });\n//         }\n//       }\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//   },\n//   [setNodes, nodes]\n// );\n// onDrop Checkpoint 3 \nconst onDrop=useCallback(event=>{event.preventDefault();const type=event.dataTransfer.getData('application/reactflow');const position={x:event.clientX-250,y:event.clientY};const nodeId=getId();const newNode={id:nodeId,type:'custom',position,data:{label:type,config:{},onConfigure:()=>{setSelectedNode(newNode);// ðŸ’¡ directly use newNode (no need to find again)\n}}};console.log(\"current selected node is :\",selectedNode);setNodes(nds=>[...nds,newNode]);},[setNodes]);const onDragOver=useCallback(event=>{event.preventDefault();event.dataTransfer.dropEffect='move';},[]);const updateNodeData=updatedNode=>{setNodes(nds=>nds.map(node=>node.id===updatedNode.id?updatedNode:node));setSelectedNode(updatedNode);};// computeWorkflowStructure  checkpoint 1\n// const computeWorkflowStructure = () => {\n//   const structure = nodes.map((node) => ({\n//     id: node.id,\n//     type: node.data.label,\n//     config: node.data.config || {},\n//     connections: edges\n//       .filter((e) => e.source === node.id)\n//       .map((e) => e.target)\n//   }));\n//   setWorkflowStructure(structure);\n//   console.log('Workflow structure:', structure);\n// };\n// computerWorkflowStructure checkpoint 2\n// logic for save workflow when save workflow button is clicked it store the structure data of nodes and edges\n//  like which node is connected to which one. and then send the data to backend through FAST API\nconst computeWorkflowStructure=async()=>{// here the \"nodes\" is the raw data we require proper schema structure like JSON to send data thorugh FAST API else \n/// else it will give error code 433 Unprocessed data kind of that\nconst structure=nodes.map(node=>({id:node.id,type:node.data.label,config:node.data.config||{},connections:edges.filter(e=>e.source===node.id).map(e=>e.target)}));setWorkflowStructure(structure);console.log('Workflow structure:',structure);setIsSaving(true);// start loading\ntry{// const result = await saveWorkflow(structure);\n// fetch(\"http://localhost:8000/api/save_workflow\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       },\n//       body: JSON.stringify({structure})\n//     })\nfetch(\"http://localhost:8000/api/save-workflow\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(structure)}).then(res=>res.json()).then(result=>console.log(result)).catch(error=>console.error(\"Error sending workflow:\",error));alert('Workflow saved successfully!');// console.log('Backend Response:', result);\n}catch(error){alert('Failed to save workflow!');}};//  logic for run workflow\n// here also like previously \"nodes\" and \"edges\" are raw data we need to parse into JSON structure\n// that is understand by FAST API else it will give error code of 422 Unprocessable content\nconst runWorkflow=async()=>{try{const formattedNodes=nodes.map(node=>({id:node.id,type:node.data.label,config:node.data.config||{},connections:edges.filter(e=>e.source===node.id).map(e=>e.target)}));const formattedEdges=edges.map(edge=>({id:edge.id,source:edge.source,target:edge.target}));const payload={nodes:formattedNodes,edges:formattedEdges};setIsRunning(true);// start loading\nconst response=await fetch(\"http://localhost:8000/api/run-workflow\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(payload)});if(!response.ok){throw new Error(`Server responded with status ${response.status}`);}const result=await response.json();console.log(\"Workflow Run Result:\",result);alert(`Workflow is running: ${result.status}`);}catch(error){console.error(\"Error running workflow:\",error);alert(\"Error running workflow. Check console.\");}};return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',width:'100%'},children:[/*#__PURE__*/_jsx(\"div\",{style:{flex:1,height:'100vh'},onDrop:onDrop,onDragOver:onDragOver,children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,onNodesChange:onNodesChange,onEdgesChange:onEdgesChange,onConnect:onConnect,nodeTypes:nodeTypes,fitView:true,children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:10,left:10,zIndex:10},children:[/*#__PURE__*/_jsx(\"button\",{onClick:computeWorkflowStructure,className:\"action-button save-button\",disabled:isSaving,style:{position:'absolute',top:20,left:20,zIndex:10,padding:'6px 12px',background:'#007bff',color:'#fff',border:'none',borderRadius:'5px'},children:isSaving?'Saving...':'Save Workflow'}),/*#__PURE__*/_jsx(\"button\",{onClick:runWorkflow,className:\"action-button run-button\",disabled:isRunning,style:{position:'absolute',top:60,// 20 (Save) + 40 (button height + spacing)\nleft:20,zIndex:10,padding:'6px 12px',background:'#28a745',color:'#fff',border:'none',borderRadius:'5px'},children:isRunning?'Running...':'Run Workflow'})]}),/*#__PURE__*/_jsx(MiniMap,{}),/*#__PURE__*/_jsx(Controls,{}),/*#__PURE__*/_jsx(Background,{})]})}),selectedNode&&/*#__PURE__*/_jsx(ConfigPanel,{nodeData:selectedNode,updateNodeData:updateNodeData})]});};export default()=>/*#__PURE__*/_jsx(ReactFlowProvider,{children:/*#__PURE__*/_jsx(Canvas,{})});","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","MiniMap","Controls","ReactFlowProvider","useNodesState","useEdgesState","CustomNode","ConfigPanel","saveWorkflow","jsx","_jsx","jsxs","_jsxs","nodeTypes","custom","id","getId","Canvas","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","workflowStructure","setWorkflowStructure","isSaving","setIsSaving","isRunning","setIsRunning","onConnect","params","eds","onDrop","event","preventDefault","type","dataTransfer","getData","position","x","clientX","y","clientY","nodeId","newNode","data","label","config","onConfigure","console","log","nds","onDragOver","dropEffect","updateNodeData","updatedNode","map","node","computeWorkflowStructure","structure","connections","filter","e","source","target","fetch","method","headers","body","JSON","stringify","then","res","json","result","catch","error","alert","runWorkflow","formattedNodes","formattedEdges","edge","payload","response","ok","Error","status","style","display","width","children","flex","height","fitView","top","left","zIndex","onClick","className","disabled","padding","background","color","border","borderRadius","nodeData"],"sources":["E:/AI Projects/Intelligent Workflow Builder/frontend/src/components/Canvas.jsx"],"sourcesContent":["// src/components/Canvas.jsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  MiniMap,\n  Controls,\n  ReactFlowProvider,\n  useNodesState,\n  useEdgesState\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport ConfigPanel from './ConfigPanel';\nimport { saveWorkflow } from '../api/workflow';\nimport './Canvas.css';\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nlet id = 0;\nconst getId = () => `node_${id++}`;\n\nconst Canvas = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [workflowStructure, setWorkflowStructure] = useState([]);\n\n  const [isSaving, setIsSaving] = useState(false);\n  const [isRunning, setIsRunning] = useState(false);\n  \n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    []\n  );\n\n//  OnDrop Checkpoint #1 ///////////////////////////////////////////////////////////////////////\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           const current = nodes.find((n) => n.id === nodeId);\n  //           setSelectedNode(current);\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n\n\n\n    //  OnDrop Checkpoint 2  /////////////////////////////////////////////////////////////////////\n\n    // const onDrop = useCallback(\n    //   (event) => {\n    //     event.preventDefault();\n    //     const type = event.dataTransfer.getData('application/reactflow');\n    //     const position = { x: event.clientX - 250, y: event.clientY };\n    //     const nodeId = getId();\n    \n    //     const newNode = {\n    //       id: nodeId,\n    //       type: 'custom',\n    //       position,\n    //       data: {\n    //         label: type,\n    //         config: {},\n    //         onConfigure: () => {\n    //           setSelectedNode((prev) => {\n    //             console.log(\"Currently selected node : \",selectedNode);\n    //             const current = nodes.find((n) => n.id === nodeId);\n    //             console.log(\"current node is : \",current)\n    //             return current;\n    //           });\n    //         }\n    //       }\n    //     };\n    \n    //     setNodes((nds) => nds.concat(newNode));\n    //   },\n    //   [setNodes, nodes]\n    // );\n    \n\n\n    // onDrop Checkpoint 3 \n\n    const onDrop = useCallback(\n      (event) => {\n        event.preventDefault();\n        const type = event.dataTransfer.getData('application/reactflow');\n        const position = { x: event.clientX - 250, y: event.clientY };\n        const nodeId = getId();\n    \n        const newNode = {\n          id: nodeId,\n          type: 'custom',\n          position,\n          data: {\n            label: type,\n            config: {},\n            onConfigure: () => {\n              setSelectedNode(newNode); // ðŸ’¡ directly use newNode (no need to find again)\n            }\n          }\n        };\n        \n        console.log(\"current selected node is :\",selectedNode)\n        setNodes((nds) => [...nds, newNode]);\n      },\n      [setNodes]\n    );\n\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const updateNodeData = (updatedNode) => {\n    setNodes((nds) =>\n      nds.map((node) => (node.id === updatedNode.id ? updatedNode : node))\n    );\n    setSelectedNode(updatedNode);\n  };\n\n\n  // computeWorkflowStructure  checkpoint 1\n  \n  // const computeWorkflowStructure = () => {\n\n  //   const structure = nodes.map((node) => ({\n  //     id: node.id,\n  //     type: node.data.label,\n  //     config: node.data.config || {},\n  //     connections: edges\n  //       .filter((e) => e.source === node.id)\n  //       .map((e) => e.target)\n  //   }));\n  //   setWorkflowStructure(structure);\n  //   console.log('Workflow structure:', structure);\n  // };\n\n\n  // computerWorkflowStructure checkpoint 2\n\n  // logic for save workflow when save workflow button is clicked it store the structure data of nodes and edges\n  //  like which node is connected to which one. and then send the data to backend through FAST API\n  const computeWorkflowStructure = async () => {\n\n    // here the \"nodes\" is the raw data we require proper schema structure like JSON to send data thorugh FAST API else \n    /// else it will give error code 433 Unprocessed data kind of that\n    const structure = nodes.map((node) => ({\n      id: node.id,\n      type: node.data.label,\n      config: node.data.config || {},\n      connections: edges\n        .filter((e) => e.source === node.id)\n        .map((e) => e.target)\n    }));\n  \n    setWorkflowStructure(structure);\n    console.log('Workflow structure:', structure);\n  \n\n    setIsSaving(true); // start loading\n\n    try {\n      // const result = await saveWorkflow(structure);\n\n      // fetch(\"http://localhost:8000/api/save_workflow\", {\n      //       method: \"POST\",\n      //       headers: {\n      //         \"Content-Type\": \"application/json\"\n      //       },\n      //       body: JSON.stringify({structure})\n      //     })\n\n\n      fetch(\"http://localhost:8000/api/save-workflow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(structure),\n      })\n        .then(res => res.json())\n        .then(result => console.log(result))\n        .catch(error => console.error(\"Error sending workflow:\", error));\n\n\n      alert('Workflow saved successfully!');\n      // console.log('Backend Response:', result);\n    } catch (error) {\n      alert('Failed to save workflow!');\n    }\n  };\n\n\n  //  logic for run workflow\n      // here also like previously \"nodes\" and \"edges\" are raw data we need to parse into JSON structure\n      // that is understand by FAST API else it will give error code of 422 Unprocessable content\n  const runWorkflow = async () => {\n    try {\n      const formattedNodes = nodes.map((node) => ({\n        id: node.id,\n        type: node.data.label,\n        config: node.data.config || {},\n        connections: edges\n          .filter((e) => e.source === node.id)\n          .map((e) => e.target),\n      }));\n  \n      const formattedEdges = edges.map((edge) => ({\n        id: edge.id,\n        source: edge.source,\n        target: edge.target,\n      }));\n  \n      const payload = {\n        nodes: formattedNodes,\n        edges: formattedEdges,\n      };\n\n      \n      setIsRunning(true); // start loading\n  \n      const response = await fetch(\"http://localhost:8000/api/run-workflow\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`Server responded with status ${response.status}`);\n      }\n  \n      const result = await response.json();\n      console.log(\"Workflow Run Result:\", result);\n      \n      alert(`Workflow is running: ${result.status}`);\n    } catch (error) {\n      console.error(\"Error running workflow:\", error);\n      alert(\"Error running workflow. Check console.\");\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, height: '100vh' }} onDrop={onDrop} onDragOver={onDragOver}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView\n        >\n\n\n        <div style={{position: 'absolute', top: 10, left: 10, zIndex: 10 }}>  \n          <button\n              onClick={computeWorkflowStructure}\n              className=\"action-button save-button\"\n              disabled={isSaving}\n              style={{\n                position: 'absolute',\n                top: 20,\n                left: 20,\n                zIndex: 10,\n                padding: '6px 12px',\n                background: '#007bff',\n                color: '#fff',\n                border: 'none',\n                borderRadius: '5px'\n              }}\n            >\n              {isSaving ? 'Saving...' : 'Save Workflow'}\n          </button>\n\n          <button\n            onClick={runWorkflow}\n            className=\"action-button run-button\"\n            disabled={isRunning}\n            style={{\n              position: 'absolute',\n              top: 60, // 20 (Save) + 40 (button height + spacing)\n              left: 20,\n              zIndex: 10,\n              padding: '6px 12px',\n              background: '#28a745',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '5px'\n            }}\n          >\n             {isRunning ? 'Running...' : 'Run Workflow'}\n          </button>\n        </div>\n          <MiniMap />\n\n          <Controls />\n\n          <Background />\n        </ReactFlow>\n        \n\n\n      </div>\n\n      {selectedNode && (\n           <ConfigPanel nodeData={selectedNode} updateNodeData={updateNodeData} />\n      )}\n    </div>\n  );\n};\n\nexport default () => (\n  <ReactFlowProvider>\n    <Canvas />\n  </ReactFlowProvider>\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}