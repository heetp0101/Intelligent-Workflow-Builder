{"ast":null,"code":"var _jsxFileName = \"E:\\\\AI Projects\\\\Intelligent Workflow Builder\\\\frontend\\\\src\\\\components\\\\Canvas.jsx\",\n  _s = $RefreshSig$();\n// src/components/Canvas.jsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, MiniMap, Controls, ReactFlowProvider, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport ConfigPanel from './ConfigPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nlet id = 0;\nconst getId = () => `node_${id++}`;\nconst Canvas = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           const current = nodes.find((n) => n.id === nodeId);\n  //           setSelectedNode(current);\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const updateNodeData = updatedNode => {\n    setNodes(nds => nds.map(node => node.id === updatedNode.id ? updatedNode : node));\n    setSelectedNode(updatedNode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        height: '100vh'\n      },\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfigPanel, {\n      nodeData: selectedNode,\n      updateNodeData: updateNodeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"xhOWNDTWZb32LM8QGpSB2VnEtCY=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Canvas;\nexport default () => /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n  children: /*#__PURE__*/_jsxDEV(Canvas, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 95,\n  columnNumber: 3\n}, this);\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","MiniMap","Controls","ReactFlowProvider","useNodesState","useEdgesState","CustomNode","ConfigPanel","jsxDEV","_jsxDEV","nodeTypes","custom","id","getId","Canvas","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","updateNodeData","updatedNode","nds","map","node","style","display","width","children","flex","height","onDrop","fitView","fileName","_jsxFileName","lineNumber","columnNumber","nodeData","_c","$RefreshReg$"],"sources":["E:/AI Projects/Intelligent Workflow Builder/frontend/src/components/Canvas.jsx"],"sourcesContent":["// src/components/Canvas.jsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  MiniMap,\n  Controls,\n  ReactFlowProvider,\n  useNodesState,\n  useEdgesState\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport ConfigPanel from './ConfigPanel';\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nlet id = 0;\nconst getId = () => `node_${id++}`;\n\nconst Canvas = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    []\n  );\n\n  \n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n  //     const position = { x: event.clientX - 250, y: event.clientY };\n\n  //     const nodeId = getId();\n\n  //     const newNode = {\n  //       id: nodeId,\n  //       type: 'custom',\n  //       position,\n  //       data: {\n  //         label: type,\n  //         config: {},\n  //         onConfigure: () => {\n  //           const current = nodes.find((n) => n.id === nodeId);\n  //           setSelectedNode(current);\n  //         }\n  //       }\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, nodes]\n  // );\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const updateNodeData = (updatedNode) => {\n    setNodes((nds) =>\n      nds.map((node) => (node.id === updatedNode.id ? updatedNode : node))\n    );\n    setSelectedNode(updatedNode);\n  };\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, height: '100vh' }} onDrop={onDrop} onDragOver={onDragOver}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n      <ConfigPanel nodeData={selectedNode} updateNodeData={updateNodeData} />\n    </div>\n  );\n};\n\nexport default () => (\n  <ReactFlowProvider>\n    <Canvas />\n  </ReactFlowProvider>\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}